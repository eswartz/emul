\   video_msx.fi
\ 
\   (c) 2010-2013 Edward Swartz
\ 
\   All rights reserved. This program and the accompanying materials
\   are made available under the terms of the Eclipse Public License v1.0
\   which accompanies this distribution, and is available at
\   http://www.eclipse.org/legal/epl-v10.html
\ 

\ Standard V9938 palette
\ Red|Blue  0|Green
Create msx-stdpalette
    $00 c, $00 c, \ 0
    $00 c, $00 c, \ 1
    $11 c, $06 c, \ 2
    $33 c, $07 c, \ 3
    $17 c, $01 c, \ 4
    $27 c, $03 c, \ 5
    $51 c, $01 c, \ 6
    $27 c, $06 c, \ 7
    $71 c, $01 c, \ 8
    $73 c, $03 c, \ 9
    $61 c, $06 c, \ A
    $64 c, $06 c, \ B
    $11 c, $04 c, \ C
    $65 c, $02 c, \ D
    $55 c, $05 c, \ E
    $77 c, $07 c, \ F
    
\   Reset status register
: msx-vstatus0
    $8F00 v-regaddr
;

\   Figure the address and shift for a pixel on the screen
: msx-pixaddr ( x y -- addr shift )
    v-stride @ u*  over  msx-shift @  urshift  +  v-patts @ +
    swap  msx-mask @  and 
;    

: msx-setupmode
    $AA msx-cursor-color c!

    v9938-sprite-setup
    
    $4000. v-stride @  UM/MOD nip  NEGATE  msx-rowsperbankmask !
;

\   Setup a MSX command
: msx-cmdsetup ( num -- )
    $9100 OR  v-regaddr
;
    
: msx-waitcmdready
    0 0 do
        VDPST c@  $01 and  0= if unloop exit then
    loop
;    
: msx-waittxready
    0 0 do
        VDPST c@  $80 and if unloop exit then  
    loop 
;    

\   Setup an MSX memory move command that expects its work to 
\   be done through the CLR port.
\
\   -- point to status reg 2
\   -- wait for ready
\   -- write command
\   -- point to CLR register
\   
: msx-setupMMMcommand ( cmd -- )
    $8F02 v-regaddr    \ set status reg for testing command finished & transfer ready
    
    msx-waitcmdready

    \ write the command
    VDPWI c!
    
    \ back to the CLR reg, no autoincrement
    $91AC v-regaddr
;    

: msx-cmd-word ( w -- )
    w>l.h  swap  VDPWI c! VDPWI c!
;

: msx-setup-cursor-DXDY ( x y -- )
    $24 msx-cmdsetup
    
    swap
    msx-cmd-word 
    
    v-rwpage c@ 8 lshift +
    msx-cmd-word
;



\ Blink a cursor in graphics 4-7 modes
\
\ Use LMMV to XOR a rectangle in the cursor shape
\
1 RamVar msx-cursor-color

: msx-adjust-cursor-color ( b -- )
    \ msx-cursor-color c@  msx-colmask @  and =  if
    \    $7 msx-cursor-color c+!
    \ then
             
;

|+ : msx-rect ( cmd clr nx ny x y -- )
    msx-setup-cursor-DXDY
    
    swap
    1- 0 max  msx-cmd-word     \ NX
    1- 0 max  msx-cmd-word     \ NY 

    VDPWI c!            \ CLR    

    $00 VDPWI c!        \ ARG (dix=0, diy=0, mxc=0)
    
    msx-setupMMMcommand   \ cmd

    msx-vstatus0
    \ no need to wait!
;

: msx-blinkcursor ( x y -- )
    2>r
    $83 \ LMMV + EOR
    msx-cursor-color c@    
    $2  v-fntheight c@  

    2r>
    msx-rect
    
    $80 v-curs c+!
    
;

\   Index by the number of bits-per-byte in a pattern
\   to get the byte to write to VDP
\
16   RamVar  msx-color-temp

:: msx-updatecolors ( )
    color-byte  $8700 OR  v-regaddr
    
    msx-color-temp :> ct
    fg c@ :> f
    bg c@ :> b
    
    msx-shift @ dup  1 =  if
        drop
    
        f $f and to f
        b $f and to b
        
        b  dup 4 lshift  OR   ct     c!
        b  4 lshift  f   OR   ct 1 + c!
        f  4 lshift  b   OR   ct 2 + c!
        f  dup 4 lshift  OR   ct 3 + c!
    else 2 = if
        f $3 and to f
        b $3 and to b         
    
        16 0 do 
            \ for each group of 4 bits that may be set...
            0  
            4 0 do
                \ fill fg/bg in 
                j  i lshift  $8  and 
                if f else b then
                6  i 2* -  lshift  OR                                           
            loop
            ct i +  c!
        loop
    else
        b  ct  c!
    then then
    
    \ b  msx-adjust-cursor-color
    
    b $55 xor  
    msx-colmask @ and
    dup 0 =  over f =  or 
    if $5a + then  
    msx-cursor-color c!
    
;

: msx-setfont   ( addr -- )
    drop
;


:: msx-clear ( w h x y -- )

    x w  or 7 and 0= :> aligned
    
    x y   msx-setup-cursor-DXDY
    
    w 1-   msx-cmd-word  \ NX
    h 1-   msx-cmd-word  \ NY
    
    aligned if 
        msx-color-temp c@  
    else
        bg c@
    then
    VDPWI c!     ( CLR: color )
    
    0 VDPWI c!  ( ARG: dix=0, diy=0, mxc=0 )
    
    aligned if
        $c0      ( HMMV )
    else
        $80      ( LMMV )
    then
    
    msx-setupMMMcommand
    
    \ no need to wait
    msx-vstatus0    

;


\ Eep, our processor can brute-force this faster than MSX can accelerate it...
\ which makes sense, given that we're doing logic for every pixel anyway!!
\
false Constant msx-use-drawchar-accel

: msx-sendcharpixel ( ch bg|fg -- ch' )
    over  $80 and  0=  8 and  urshift  VDPWI c!  1 lshift
;

: msx-drawchar-accel ( ch x y -- )
    msx-setup-cursor-DXDY
    
    dup  ch>xy  swap
    1-    msx-cmd-word
    1-    msx-cmd-word
    
    >v-fontaddr  gwaddr  
    
    color-word  swpb  :> cw
    v-fntwidth c@ :> width
    
    \ send first pixel
    GPLRD c@  cw  msx-sendcharpixel  ( send first CLR  -- ch )
    
    0 VDPWI c!  ( ARG: dix=0, diy=0, mxc=0 )
    
    $B8 msx-setupMMMcommand     ( LMMC + TINP )

    \ finish first row
    width 1-  0 do  msx-waittxready  cw msx-sendcharpixel  loop  drop
    
    v-fntheight c@ 1-  0 do
        GPLRD c@
        width 0 do
            msx-waittxready  cw msx-sendcharpixel
        loop
        drop 
    loop
    
    msx-vstatus0    
;

: msx-crosses-bank ( y -- f )
    dup msx-rowsperbankmask @ and
    swap v-fntheight c@ + 1-  msx-rowsperbankmask @ and
    = not
;

:: msx-drawchar-16 ( ch x y -- )
    v-fntwidth c@ :> width
    
    x 1 and 
    y  msx-crosses-bank  
    width 1 and  
    or  or 
    if
        ch x y  msx-drawchar-accel
    else
        x y  msx-pixaddr drop  vsetbank :> addr
        
        ch  >v-fontaddr  gwaddr  
        
        
        msx-color-temp :> ct
        
        addr
        v-fntheight c@  0 do
            dup !vwaddr
            GPLRD c@
            dup l.h>w  
            width 0 do
                \ write <fg|bg>|<fg|bg> for two consecutive bits
                -2 crshift
                dup  3 and  ct +  c@  VDPWD c!
            2 +loop
            drop 
            v-stride @  +
        loop
        drop
    then
;


:: msx-drawchar-4 ( ch x y -- )
    v-fntwidth c@ :> width
    
    x 3 and
    y msx-crosses-bank  
    width  8 = not  
    or or 
    if
        ch x y  msx-drawchar-accel  
    else
        x y  msx-pixaddr  :> sh   vsetbank :> addr
        
        ch   >v-fontaddr  gwaddr  
        
        msx-color-temp :> ct
        
        addr
        v-fntheight c@  0 do
            dup !vwaddr
            GPLRD c@
            dup l.h>w  
            
            \ write four colors for four consecutive bits
            -4 crshift
            dup  $f and  ct +  c@  VDPWD c!
            
            width 8 = if
                -4 crshift
                dup  $f and  ct +  c@  VDPWD c!
            then
            
            drop 
            v-stride @  +
        loop
        drop
     then
;

: msx-drawchar-256 ( ch x y -- )
    v-fntheight c@ :> height

    dup msx-crosses-bank   
    over height + 7 and 
    and
    if
        msx-drawchar-accel
    else     
        msx-pixaddr drop  vsetbank :> addr
        
        >v-fontaddr  gwaddr  
        
        v-fntwidth c@ :> width
        
        fg c@ :> f
        bg c@ :> b
        
        addr
        v-fntheight c@  0 do
            dup !vwaddr
            GPLRD c@
            dup l.h>w  
            width 0 do
                \ write one byte
                -1 crshift
                dup  1 and  if f else b then  VDPWD c!
            loop
            drop 
            v-stride @  +
        loop
        drop
    then  
;


: msx-readpixel-16 ( x y -- c )
    msx-pixaddr  2 lshift  :> shift  vsetbank
    
    vc@  4 shift -  urshift
	$f and
;

: msx-drawpixel-16 ( c x y -- )
    msx-pixaddr  2 lshift  :> shift  vsetbank :> addr

    $f0 shift  urshift  :> mask
    $f and  
    4 shift -  lshift          ( c' )
    addr vc@                   ( vb c' )
    mask nand  or
    addr vc!
;


: msx-readpixel-4 ( x y -- c )
    msx-pixaddr  2*  :> shift  vsetbank
    
    vc@  6 shift -  urshift
	$3 and
;

: msx-drawpixel-4 ( c x y -- )
    msx-pixaddr  2*  :> shift  vsetbank :> addr

    $c0 shift  urshift  :> mask
    $3 and
    6 shift -  lshift          ( c' )
    addr vc@                   ( vb c' )
    mask nand  or
    addr vc!
;


: msx-readpixel-256 ( x y -- c )
    msx-pixaddr drop  vsetbank :> addr

    addr vc@
;

: msx-drawpixel-256 ( xt x y -- )
    msx-pixaddr drop  vsetbank :> addr

    addr vc!
;



: msx-set-patt-reg
    v-rwpage c@  5 lshift  
    	$1F or	  \ use all address lines  
    	2 (vr!)   \ actually screen reg
;

: msx-setupregs
    msx-set-patt-reg
    std-set-sprite-reg
    std-set-sprpat-reg
;
    

Create MsxFunctions 
msx-use-drawchar-accel [if]
    'v-drawchar ,        ' msx-drawchar-accel ,
[then]    
    'v-blinkcursor ,     ' msx-blinkcursor ,
    'v-setfont ,         ' msx-setfont ,
    'v-clear ,           ' msx-clear ,
    0 , 

Create MsxBaseFunctions
    'v-setupregs ,           ' msx-setupregs ,
    'v-setupmode ,           ' msx-setupmode ,
    'v-updatecolors ,        ' msx-updatecolors ,
	'v-drawline ,            ' slow-drawline ,
    0 ,
    

create GfxSkinnyModeParams
    v-screen    , $0000 ,   v-screensz  , $0 ,
    v-colors    , $0000 ,   v-colorsz   , $0 ,   
    v-patts     , $0000 ,   v-pattsz    , $6400 ,
    v-sprites   , $7A00 ,   v-sprcol    , $7800 ,
    v-sprpat    , $7000 ,   v-sprmot    , $7A80 ,
    v-free      , $8000 ,   v-pagesize  , $8000 ,
    
    0 ,

Create GfxFatModeParams
    v-screen    , $0000 ,   v-screensz  , $0 ,
    v-colors    , $0000 ,   v-colorsz   , $0 ,   
    v-patts     , $0000 ,   v-pattsz    , $D400 ,
    v-sprites   , $D600 ,   v-sprcol    , $D400 ,
    v-sprpat    , $D800 ,   v-sprmot    , $D680 ,
    v-free      , $E000 ,   v-pagesize  , $0000 ,

    0 ,
    

\       4=graphics 4 mode (256x212x16)
\           >0000 = patts
\           >7000 = sprite patts
\           >7800 = sprite colors
\           >7A00 = sprites
\           >7A80 = sprite motion
\           >8000+= free
\
Create Gfx4ModeParams
    v-width     , 256 ,     v-height    , 212 ,
    
    v-stride  , $80 ,     msx-shift   , 1 ,       msx-mask , $1  ,    msx-colmask , $f ,

msx-use-drawchar-accel not [if]
    'v-drawchar ,        ' msx-drawchar-16 ,
[then]
	'v-readpixel ,       ' msx-readpixel-16 ,
	'v-drawpixel ,       ' msx-drawpixel-16 ,
    0 ,
    
    
: gfx4-mode
    MsxBaseFunctions write-var-list
    MsxFunctions write-var-list
    GfxSkinnyModeParams v-set-alloc-list
    Gfx4ModeParams v-set-alloc-list
    $06A0 write-vmoderegs
;


\       6=graphics 6 mode (512x212x16)
\           >0000 = patts
\           >D400 = sprite colors
\           >D600 = sprites (1B0)
\           >D680 = sprite motion
\           >D800 = sprite patts (1B)
\           >E000+= free
\
Create Gfx6ModeParams
    v-width     , 512 ,     v-height    , 212 ,
    
    v-stride  , $100 ,    msx-shift   , 1 ,       msx-mask , $1  ,    msx-colmask , $f ,
    
msx-use-drawchar-accel not [if]
    'v-drawchar ,        ' msx-drawchar-16 ,
[then]
	'v-readpixel ,       ' msx-readpixel-16 ,
	'v-drawpixel ,       ' msx-drawpixel-16 ,
    0 ,
    
    
: gfx6-mode
    MsxBaseFunctions write-var-list
    MsxFunctions write-var-list
    GfxFatModeParams v-set-alloc-list
    Gfx6ModeParams v-set-alloc-list
    $0AA0 write-vmoderegs
;



\       5=graphics 5 mode (512x212x4)
\           >0000 = patts
\           >7000 = sprite patts
\           >7800 = sprite colors
\           >7A00 = sprites
\           >7A80 = sprite motion
\           >8000+= free
\
Create Gfx5ModeParams
    v-width     , 512 ,     v-height    , 212 ,
    
    v-stride  , $80 ,     msx-shift   , 2 ,       msx-mask , $3  ,    msx-colmask , $3 , 
    
msx-use-drawchar-accel not [if]
    'v-drawchar ,        ' msx-drawchar-4 ,
[then]
	'v-readpixel ,       ' msx-readpixel-4 ,
	'v-drawpixel ,       ' msx-drawpixel-4 ,

    0 ,
    
: gfx5-mode
    MsxBaseFunctions write-var-list
    MsxFunctions write-var-list
    GfxSkinnyModeParams v-set-alloc-list
    Gfx5ModeParams v-set-alloc-list
    $08A0 write-vmoderegs
    $87ff v-regaddr
;
    
    

\       7=graphics 7 mode (256x212x256)
\           >0000 = patts
\           >D400 = sprite colors
\           >D600 = sprites (1AC)
\           >D680 = sprite motion
\           >D800 = sprite patts (1B)
\           >E000+= free
\
Create Gfx7ModeParams
    v-width     , 256 ,     v-height    , 212 ,
    
    v-stride  , $100 ,    msx-shift   , 0 ,       msx-mask , $0  ,    msx-colmask , $ff , 
    
msx-use-drawchar-accel not [if]
    'v-drawchar ,        ' msx-drawchar-256 ,
[then]
	'v-readpixel ,       ' msx-readpixel-256 ,
	'v-drawpixel ,       ' msx-drawpixel-256 ,

    0 ,
    
    
: gfx7-mode
    MsxBaseFunctions write-var-list
    MsxFunctions write-var-list
    GfxFatModeParams v-set-alloc-list
    Gfx7ModeParams v-set-alloc-list
    $0EA0 write-vmoderegs
;

    